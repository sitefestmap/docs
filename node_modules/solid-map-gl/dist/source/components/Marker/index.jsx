import { onCleanup, createEffect, splitProps } from 'solid-js';
import { useMapContext } from '../MapProvider';
export const Marker = (props) => {
    if (!props.lngLat)
        throw new Error('Marker - lngLat is required');
    const [update, create_popup, create_marker] = splitProps(props, ['lngLat', 'children', 'showPopup', 'draggable'], ['popup', 'onOpen', 'onClose']);
    const [ctx] = useMapContext();
    let marker = null;
    let popup = null;
    const LNGLAT = update.lngLat;
    // Add or Update Popup
    createEffect(() => {
        if (!ctx.map)
            return;
        popup?.remove();
        popup = new window.MapLib.Popup({
            closeOnClick: false,
            focusAfterOpen: false,
            ...create_popup.popup,
        })
            .on('open', () => create_popup.onOpen?.())
            .on('close', () => create_popup.onClose?.());
        // Update Popup Content
        createEffect(() => {
            if (update.children === undefined)
                return;
            typeof update.children === 'string'
                ? popup?.setHTML(update.children)
                : popup?.setDOMContent(update.children);
            marker?.setPopup(popup);
        });
        // Toggle Popup
        createEffect(() => update.showPopup !== popup?.isOpen() && marker?.togglePopup());
    });
    // Add or Update Marker
    createEffect(() => {
        if (!ctx.map)
            return;
        marker?.remove();
        marker = new window.MapLib.Marker(create_marker.options)
            .on('dragstart', () => create_marker.onDragStart?.())
            .on('dragend', () => create_marker.onDragEnd?.())
            .on('drag', () => create_marker.onDrag?.(marker?.getLngLat().toArray()))
            .setPopup(popup)
            .setLngLat(LNGLAT)
            .addTo(ctx.map);
        // Toggle Popup
        createEffect(() => update.showPopup !== popup?.isOpen() && marker?.togglePopup());
    });
    // Update Position
    createEffect(() => marker?.setLngLat(update.lngLat));
    // Update Draggable
    createEffect(() => marker?.setDraggable(update.draggable));
    // Remove Marker
    onCleanup(() => marker?.remove());
    return null;
};
