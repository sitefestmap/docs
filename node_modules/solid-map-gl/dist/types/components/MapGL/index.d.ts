import { Component } from "solid-js";
import type { mapEventTypes } from "../../events";
import type mapboxgl from "mapbox-gl";
import type { MapboxOptions } from "mapbox-gl/src/ui/map";
import type { LngLatLike } from "mapbox-gl/src/geo/lng_lat.js";
import type { LngLatBounds } from "mapbox-gl/src/geo/lng_lat_bounds.js";
import type { PaddingOptions } from "mapbox-gl/src/geo/edge_insets.js";
import type { StyleSpecification } from "mapbox-gl/src/style-spec/types.js";
import type { JSX } from "solid-js";
declare global {
    interface Window {
        MapLib?: any;
    }
}
export type Map = mapboxgl.Map & {
    debug: boolean;
    debugEvents: boolean;
    sourceIdList: string[];
    layerIdList: string[];
};
export type Viewport = {
    id?: string;
    point?: {
        x: number;
        y: number;
    };
    center?: LngLatLike;
    bounds?: LngLatBounds;
    zoom?: number;
    pitch?: number;
    bearing?: number;
    padding?: PaddingOptions;
    inTransit?: boolean;
};
type Props = {
    /** ID for the map container element */
    id?: string;
    /** Map Container CSS Style */
    style?: JSX.CSSProperties;
    /** Map Container CSS Class */
    class?: string;
    /** SolidJS Class List for Map Container */
    classList?: {
        [k: string]: boolean | undefined;
    };
    /** Current Map View */
    viewport?: Viewport;
    /** Mapbox Options
     * @see https://docs.mapbox.com/mapbox-gl-js/api/map/#map-parameters
     */
    options?: MapboxOptions;
    /** Mapbox Style Configuration
     * @see https://docs.mapbox.com/mapbox-gl-js/guides/styles/#configure-a-style
     */
    config?: {
        id?: string;
        lightPreset?: "dawn" | "day" | "dusk" | "night" | string;
        showPlaceLabels?: boolean;
        showRoadLabels?: boolean;
        showPointOfInterestLabels?: boolean;
        showTransitLabels?: boolean;
        font?: string[];
        [key: string]: boolean | string | string[];
    };
    /** Type for pan, move and zoom transitions */
    transitionType?: "flyTo" | "easeTo" | "jumpTo" | string;
    /** Event listener for Viewport updates */
    onViewportChange?: (viewport: Viewport) => void;
    /** Event listener for User Interaction */
    onUserInteraction?: (user: boolean) => void;
    /** Displays Map Tile Borders */
    showTileBoundaries?: boolean;
    /** Displays Wireframe if Terrain is visible */
    showTerrainWireframe?: boolean;
    /** Displays Borders if Padding is set */
    showPadding?: boolean;
    /** Displays Label Collision Boxes */
    showCollisionBoxes?: boolean;
    /** Displays all feature outlines even if normally not drawn by style rules */
    showOverdrawInspector?: boolean;
    /** Mouse Cursor Style */
    cursorStyle?: string;
    darkStyle?: StyleSpecification | string;
    disableResize?: boolean;
    mapLib?: any;
    apikey?: string;
    debug?: boolean;
    debugEvents?: boolean;
    ref?: HTMLDivElement;
    /** Children within the Map Container */
    children?: any;
} & mapEventTypes;
/** Creates a new Map Container */
export declare const MapGL: Component<Props>;
export {};
